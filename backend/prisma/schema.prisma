// ===================================================
// NECF Attendance System - Prisma Schema (PascalCase)
// ===================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ================== ENUMS ==================
//

enum RoleType {
  SUPER_ADMIN @map("super_admin")
  PASTOR      @map("pastor")
  LEADER      @map("leader")
  MEMBER      @map("member")
}

enum SessionType {
  SUNDAY_SERVICE  @map("sunday_service")
  MIDWEEK_SERVICE @map("midweek_service")
  PRAYER_MEETING  @map("prayer_meeting")
  BIBLE_STUDY     @map("bible_study")
  EVENT           @map("event")
}

enum AttendanceStatus {
  PRESENT @map("present")
  ABSENT  @map("absent")
  LATE    @map("late")
  EXCUSED @map("excused")
}

enum QRTokenPurpose {
  ATTENDANCE @map("attendance")
  MEMBERSHIP @map("membership")
}

//
// ================== MODELS ==================
//

// Roles
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  users User[]

  @@map("roles")
}

// Users
model User {
  id              String     @id @default(uuid())
  email           String     @unique
  firstName       String     @map("first_name")
  lastName        String     @map("last_name")
  password        String
  phone           String?    @map("phone")
  gender          String?    @map("gender")
  dateOfBirth     DateTime?  @map("date_of_birth")
  address         String?    @map("address")
  city            String?    @map("city")
  state           String?    @map("state")
  zipCode         String?    @map("zip_code")
  profilePicture  String?    @map("profile_picture")
  status          String     @default("ACTIVE")
  isActive        Boolean    @default(true) @map("is_active")
  loginAttempts   Int        @default(0) @map("login_attempts")
  lastLoginAt     DateTime?  @map("last_login_at")
  emailVerifiedAt DateTime?  @map("email_verified_at")
  lockedUntil     DateTime?  @map("locked_until")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relationships
  roleId             String    @map("role_id")
  role               Role      @relation(fields: [roleId], references: [id])
  member             Member?
  auditLogs          AuditLog[]
  createdMembers     Member[]   @relation("MemberCreatedBy")
  createdQRTokens    QRToken[]  @relation("QRTokenCreatedBy")
  revokedQRTokens    QRToken[]  @relation("QRTokenRevokedBy")
  recordedAttendance Attendance[] @relation("AttendanceRecordedBy")

  @@map("users")
}

// Members
model Member {
  id               String    @id @default(uuid())
  membershipId     String    @unique @map("membership_id")
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  email            String    @unique
  phone            String?   @map("phone")
  gender           String?   @map("gender")
  dateOfBirth      DateTime? @map("date_of_birth")
  address          String?   @map("address")
  city             String?   @map("city")
  state            String?   @map("state")
  zipCode          String?   @map("zip_code")
  profilePicture   String?   @map("profile_picture")
  membershipStatus String    @default("ACTIVE") @map("membership_status")
  joinDate         DateTime  @map("join_date")
  endDate          DateTime? @map("end_date")
  notes            String?
  emailVerifiedAt  DateTime? @map("email_verified_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relationships
  userId     String?  @unique @map("user_id")
  user       User?    @relation(fields: [userId], references: [id])
  cellId     String?  @map("cell_id")
  cell       Cell?    @relation(fields: [cellId], references: [id])
  attendance Attendance[] @relation("MemberAttendance")
  qrTokens   QRToken[]
  createdById String? @map("created_by_id")
  createdBy   User?   @relation("MemberCreatedBy", fields: [createdById], references: [id])

  @@map("members")
}

// Cells
model Cell {
  id          String   @id @default(uuid())
  name        String
  description String?
  leaderId    String?  @map("leader_id")
  capacity    Int?
  location    String?
  meetingDay  String?  @map("meeting_day")
  meetingTime String?  @map("meeting_time")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  members Member[]

  @@map("cells")
}

// Sessions
model Session {
  id          String      @id @default(uuid())
  title       String      @unique
  name        String?
  description String?
  sessionType SessionType @default(SUNDAY_SERVICE) @map("session_type")
  status      String      @default("ACTIVE")
  startTime   DateTime    @map("start_time")
  endTime     DateTime    @map("end_time")
  location    String?
  maxCapacity Int?        @map("max_capacity")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relationships
  attendance Attendance[] @relation("SessionAttendance")

  @@map("sessions")
}

// Attendance
model Attendance {
  id            String           @id @default(uuid())
  status        AttendanceStatus @default(PRESENT)
  checkInTime   DateTime? @map("check_in_time")
  checkOutTime  DateTime? @map("check_out_time")
  checkedInAt   DateTime? @map("checked_in_at")
  latitude      Float?
  longitude     Float?
  isManualEntry Boolean   @default(false) @map("is_manual_entry")
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relationships
  memberId     String  @map("member_id")
  member       Member  @relation("MemberAttendance", fields: [memberId], references: [id])
  sessionId    String  @map("session_id")
  session      Session @relation("SessionAttendance", fields: [sessionId], references: [id])
  recordedById String? @map("recorded_by_id")
  recordedBy   User?   @relation("AttendanceRecordedBy", fields: [recordedById], references: [id])

  @@unique([memberId, sessionId])
  @@map("attendance")
}

// QR Tokens
model QRToken {
  id         String         @id @default(uuid())
  token      String         @unique
  purpose    QRTokenPurpose @default(ATTENDANCE)
  expiresAt  DateTime       @map("expires_at")
  isUsed     Boolean        @default(false) @map("is_used")
  usedAt     DateTime?      @map("used_at")
  revokedAt  DateTime?      @map("revoked_at")
  metadata   Json?
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")

  // Relationships
  memberId    String  @map("member_id")
  member      Member  @relation(fields: [memberId], references: [id])
  createdById String? @map("created_by_id")
  createdBy   User?   @relation("QRTokenCreatedBy", fields: [createdById], references: [id])
  revokedById String? @map("revoked_by_id")
  revokedBy   User?   @relation("QRTokenRevokedBy", fields: [revokedById], references: [id])

  @@map("qr_tokens")
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   @default("INFO")
  isRead    Boolean  @default(false) @map("is_read")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

// Audit Logs
model AuditLog {
  id         String   @id @default(uuid())
  action     String
  entity     String
  entityId   String?  @map("entity_id")
  entityType String?  @map("entity_type")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  metadata   Json?
  severity   String?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relationships
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}